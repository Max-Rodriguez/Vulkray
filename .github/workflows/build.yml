name: Continuous Integration
on: [push, pull_request]

jobs:
  linux:
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-latest
    container: ubuntu:rolling
    env:
      DEBIAN_FRONTEND: "noninteractive"
      GLSL_COMPILER_VERSION: "shaderc-2022.2"
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu Clang",
            artifact: "linux-clang.tar.xz",
            cc: "clang", cxx: "clang++",
            cmake_configure_options: '-DCMAKE_EXE_LINKER_FLAGS="-v -fuse-ld=lld"',
          }
          - {
            name: "Ubuntu GCC",
            artifact: "linux-gcc.tar.xz",
            cc: "gcc", cxx: "g++",
          }

    steps:
      - name: Update environment
        shell: bash
        run: |
          # Update package lists
          apt update -qq
          # Install build tools
          apt install -y \
            sudo \
            clang \
            cmake \
            git \
            wget \
            google-mock \
            libgtest-dev \
            libgl1-mesa-dev \
            libx11-dev \
            libx11-xcb-dev \
            libxcb-dri3-dev \
            libxcb-icccm4-dev \
            libxcb-image0-dev \
            libxcb-keysyms1-dev \
            libxcb-randr0-dev \
            libxcb-render-util0-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-sync-dev \
            libxcb-util-dev \
            libxcb-xfixes0-dev \
            libxcb-xinerama0-dev \
            libxcb-xkb-dev \
            lld \
            ninja-build \
            pkg-config \
            python3 \
            python3-pip \
            xkb-data \
            xorg-dev \
            libvulkan-dev \
            vulkan-tools \
            vulkan-validationlayers-dev \
            spirv-tools \
            glslang-dev \
            glslang-tools
          pip3 install wheel setuptools
          pip3 install conan mako
      - name: Checkout
        uses: actions/checkout@v3
      - name: Create Default Conan Profile
        shell: bash
        run: |
          conan profile new default --detect
          conan profile update settings.compiler.libcxx=libstdc++11 default
      - name: Check Cached GLSLC Binary
        id: glslc-cache
        uses: actions/cache@v3.0.8
        with:
          path: /bin/glslc
          key: ${{ runner.os }}-${{ env.GLSL_COMPILER_VERSION }}-binary
      - name: Build Google GLSL Compiler # Ubuntu/Debian doesn't package glslc binary; do if not cached!
        if: steps.glslc-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          wget https://github.com/google/shaderc/archive/refs/tags/v2022.2.tar.gz
          tar -xvf v2022.2.tar.gz
          cd shaderc-2022.2
          ./utils/git-sync-deps
          mkdir build
          cd build
          cmake -GNinja -DCMAKE_BUILD_TYPE=Release ..
          ninja
          sudo cp glslc/glslc /bin
      - name: Configure CMake
        shell: bash
        run: |
          bash ./linux/configure.sh release
      - name: Build Engine Release
        shell: bash
        run: |
          bash ./linux/build.sh release
